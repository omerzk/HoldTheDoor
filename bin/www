#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('HoldTheDoor:server');
var http = require('https');
var fs = require('fs');
var DB = require('../DB.js');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);
var server;
// Create options for encryption
var pathToCerts = '/etc/letsencrypt/live/sentgame.tk';
var options = {
  key: fs.readFileSync(pathToCerts + '/privkey.pem'),
  cert: fs.readFileSync(pathToCerts + '/fullchain.pem') //,
  //ca: fs.readFileSync(pathToCerts + '/chain.pem')
};

///////////////////

var LEX = require('letsencrypt-express');



///////////////////




//
//var dbReady = false;

//Init remote DB
dataBase = new DB();
dataBase.init(function () {
  console.log("DB ready");
  //load db data
  dataBase.fillGames(Start);
  //create http server
  //server = http.createServer(app);

  /**
   * Create HTTP server.
   */
  var lex = LEX.create({
    configDir: '/etc/letsencrypt', //require('os').homedir() + '/letsencrypt/etc',
    approveRegistration: function (hostname, cb) { // leave `null` to disable automatic registration
      // Note: this is the place to check your database to get the user associated with this domain
      cb(null, {
        domains: ['sentgame.southeastasia.cloudapp.azure.com', 'sentgame.tk'],
        email: 'rom.cohen90@gmail.com',
        agreeTos: true
      });
    }
  });

  console.log(lex.httpsOptions);

  /**
   * Create HTTP server.
   */
  server = http.createServer(lex.httpsOptions, LEX.createAcmeResponder(lex ,app));
  //server = http.createServer(app);

  //server = http.createServer(options, app)

});

io = null;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      return console.log(error);
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

function Start() {
  io = require('socket.io')(server);

  server.listen(port);

  server.on('error', onError);
  server.on('listening', onListening);


  io.sockets.on('connection', (socket) => {
    console.log('a user has connected');

    socket.on('HELLO', (data) => {
      var game = activeGames[data.game];
      if (game == null)return;
      socket.player = data.name;
      socket.game = data.game;
      if (game.players.indexOf(socket.player) === -1) {
        socket.join(data.game);        // put socket in a specific game channel
        sockets[socket.game][socket.player] = socket;

        game.addPlayer(socket.player);
        dataBase.updateDBPlayers(game);

        //inform players of new player
        io.sockets.in(game.id).emit('Player List', {playerList: activeGames[socket.game].players});//update players
      }
    });

    socket.on('reHELLO', ()=> {
      if (sockets[socket.game] != null) {
        sockets[socket.game][socket.player] = socket;
        socket.join(socket.game);
      }
      //meant to inforce a chain of precedence
      socket.emit('ackReHello');
    });

    socket.on('submit', (data) => {
      if (activeGames[socket.game] != null)
        activeGames[socket.game].submitSentence(data.sentence, socket.player);
    });

    socket.on('disconnect', ()=> {
      var game = activeGames[socket.game];
      if (game != null) {
        game.removePlayer(socket.player);
        dataBase.updateDBPlayers(game)
        io.sockets.in(game.id).emit('Player List', {playerList: game.players});//update players
      }
      console.log('Disconnect', socket.player)
    });

  });
}

module.exports = dataBase;