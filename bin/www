#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('HoldTheDoor:server');
var https = require('https');
var fs = require('fs');
var mongoose = require('mongoose');
var Game = require('../Game.js');
var GameModel = require('../models/Game.js');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);
var server;
// Create options for encryption
var pathToCerts = '/etc/letsencrypt/live/sentencegameomer.tk';
var options = {
  key: fs.readFileSync(pathToCerts + '/privkey.pem'),
  cert: fs.readFileSync(pathToCerts + '/fullchain.pem'),
  ca: fs.readFileSync(pathToCerts + '/chain.pem')
}


var dbReady = false;

//Init remote mongodb
mongoose.connect('mongodb://thrisno:clod@ds036789.mlab.com:36789/dibi');
var db = mongoose.connection;
io = null;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  console.log("DB ready");
  dbReady = true;
  GameModel.find({}, function (err, mongoGames) {
    for (i = 0; i < mongoGames.length; i++) {
      var gameName = mongoGames[i].id;
      var newGame = new Game(mongoGames[i].turnsLeft, mongoGames[i].id);
      newGame.updatefromDB(mongoGames[i]);
      activeGames[gameName] = newGame;
    }
  });

  /**
   * Create HTTPs server.
   */
  server = https.createServer(app);
  io = require('socket.io')(server);
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(options, port);

  server.on('error', onError);
server.on('listening', onListening);


  io.sockets.on('connection', (socket) => {
  console.log('a user has connected');

  socket.on('HELLO', (data) => {
    console.log('Hello' + data.name);
    var game = activeGames[data.game];
    if (game == null)return;
    socket.player = data.name;
    socket.game = data.game;

    if (game.players.indexOf(socket.player) === -1){
      socket.join(data.game);        // put socket in a specific game channel
      sockets[socket.game][socket.player] = socket;
      game.addPlayer(socket.player);
      GameModel.findOne({id: game.id}, function (err, gameFound) {
        if (err) throw err;
        gameFound.players.push(socket.player);
        gameFound.save(function (err) {
          if (err) throw err;
          console.log('Game successfully added a player to DB!');
        });
      });
      console.log("players", game.players, game.players.length);
      io.sockets.in(game.id).emit('Player List', {playerList: activeGames[socket.game].players});//update players
    }
  });

  socket.on('reHELLO', ()=> {
    if (socekts[game] != null) {
      sockets[socket.game][socket.player] = socket;
      socket.join(activeGames[socket.game].id);
    }
  });

  socket.on('submit', (data) => {
    if (activeGames[socket.game] !== null)
      activeGames[socket.game].submitSentence(data.sentence, socket.player);
  });

  socket.on('disconnect', ()=> {
    var game = activeGames[socket.game];
    if (game != null) {
      game.removePlayer(socket.player);
      GameModel.findOne({id: game.id}, function (err, gameFound) {
        if (err) throw err;
        gameFound.players = game.players;
        gameFound.save(function (err) {
          if (err) throw err;
          console.log('Game successfully added a player to DB!');
        });
      });
      io.sockets.in(game.id).emit('Player List', {playerList: game.players});//update players
      console.log('Disconnect', socket.player)
    }

  });

});
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
