#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('HoldTheDoor:server');
var https = require('http');
var fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create options for encryption
var pathToCerts = '/etc/letsencrypt/live/sentencegameomer.tk';
//var options = {
//  key: fs.readFileSync(pathToCerts + '/privkey.pem'),
//  cert: fs.readFileSync(pathToCerts + '/fullchain.pem'),
//  ca: fs.readFileSync(pathToCerts + '/chain.pem')
//}

/**
 * Create HTTPs server.
 */
var server = https.createServer(app);
io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.sockets.on('connection', (socket) => {
  console.log('a user has connected');

  socket.on('HELLO', (data) => {
    socket.player = data.name;
    socket.game = data.game;
    socket.join(data.game);        // put socket in a specific game channel
    sockets[socket.player] = socket;
    var game = activeGames[data.game];
    if (game.players.indexOf(socket.player) === -1){
      game.addPlayer(socket.player);
    }
    console.log("players", game.players, game.players.length);

    io.sockets.in(game.id).emit('Player List', {playerList: activeGames[socket.game].players});//update players
  });

  socket.on('reHELLO', ()=> {
    sockets[socket.player] = socket;
  });

  socket.on('submit', (data) => {
    if (activeGames[socket.game] !== null)
      activeGames[socket.game].submitSentence(data.sentence, socket.player);
  });

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
